define('dummy/tests/app.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - app.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'app.js should pass jshint.');
  });
});
define('dummy/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = destroyApp;

  function destroyApp(application) {
    _ember['default'].run(application, 'destroy');
  }
});
define('dummy/tests/helpers/destroy-app.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - helpers/destroy-app.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');
  });
});
define('dummy/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember', 'dummy/tests/helpers/start-app', 'dummy/tests/helpers/destroy-app'], function (exports, _qunit, _ember, _dummyTestsHelpersStartApp, _dummyTestsHelpersDestroyApp) {
  var Promise = _ember['default'].RSVP.Promise;

  exports['default'] = function (name) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    (0, _qunit.module)(name, {
      beforeEach: function beforeEach() {
        this.application = (0, _dummyTestsHelpersStartApp['default'])();

        if (options.beforeEach) {
          return options.beforeEach.apply(this, arguments);
        }
      },

      afterEach: function afterEach() {
        var _this = this;

        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);
        return Promise.resolve(afterEach).then(function () {
          return (0, _dummyTestsHelpersDestroyApp['default'])(_this.application);
        });
      }
    });
  };
});
define('dummy/tests/helpers/module-for-acceptance.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - helpers/module-for-acceptance.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');
  });
});
define('dummy/tests/helpers/resolver', ['exports', 'dummy/resolver', 'dummy/config/environment'], function (exports, _dummyResolver, _dummyConfigEnvironment) {

  var resolver = _dummyResolver['default'].create();

  resolver.namespace = {
    modulePrefix: _dummyConfigEnvironment['default'].modulePrefix,
    podModulePrefix: _dummyConfigEnvironment['default'].podModulePrefix
  };

  exports['default'] = resolver;
});
define('dummy/tests/helpers/resolver.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - helpers/resolver.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'helpers/resolver.js should pass jshint.');
  });
});
define('dummy/tests/helpers/start-app', ['exports', 'ember', 'dummy/app', 'dummy/config/environment'], function (exports, _ember, _dummyApp, _dummyConfigEnvironment) {
  exports['default'] = startApp;

  function startApp(attrs) {
    var application = undefined;

    var attributes = _ember['default'].merge({}, _dummyConfigEnvironment['default'].APP);
    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;

    _ember['default'].run(function () {
      application = _dummyApp['default'].create(attributes);
      application.setupForTesting();
      application.injectTestHelpers();
    });

    return application;
  }
});
define('dummy/tests/helpers/start-app.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - helpers/start-app.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'helpers/start-app.js should pass jshint.');
  });
});
define('dummy/tests/resolver.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - resolver.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'resolver.js should pass jshint.');
  });
});
define('dummy/tests/router.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - router.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'router.js should pass jshint.');
  });
});
define('dummy/tests/runner', ['exports'], function (exports) {
  /*jshint globalstrict: true*/
  'use strict';

  var glob = require('glob');
  var Mocha = require('mocha');

  var mocha = new Mocha({
    reporter: 'spec'
  });

  var arg = process.argv[2];
  var root = 'tests/';

  function addFiles(mocha, files) {
    glob.sync(root + files).forEach(mocha.addFile.bind(mocha));
  }

  addFiles(mocha, '/**/*-nodetest.js');

  if (arg === 'all') {
    addFiles(mocha, '/**/*-nodetest-slow.js');
  }

  mocha.run(function (failures) {
    process.on('exit', function () {
      process.exit(failures);
    });
  });
});
define('dummy/tests/runner.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - runner.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'runner.js should pass jshint.');
  });
});
define('dummy/tests/test-helper', ['exports', 'dummy/tests/helpers/resolver', 'ember-qunit'], function (exports, _dummyTestsHelpersResolver, _emberQunit) {

  (0, _emberQunit.setResolver)(_dummyTestsHelpersResolver['default']);
});
define('dummy/tests/test-helper.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - test-helper.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'test-helper.js should pass jshint.');
  });
});
define('dummy/tests/unit/index-nodetest', ['exports'], function (exports) {
  /*jshint globalstrict: true*/
  'use strict';

  var assert = require('ember-cli/tests/helpers/assert');

  describe('build plugin', function () {
    var subject, mockUi, config;

    beforeEach(function () {
      subject = require('../../index');
      mockUi = {
        messages: [],
        verbose: true,
        write: function write() {},
        writeLine: function writeLine(message) {
          this.messages.push(message);
        }
      };
    });

    it('has a name', function () {
      var plugin = subject.createDeployPlugin({
        name: 'test-plugin'
      });

      assert.equal(plugin.name, 'test-plugin');
    });

    it('implements the correct hooks', function () {
      var plugin = subject.createDeployPlugin({
        name: 'test-plugin'
      });

      assert.equal(typeof plugin.configure, 'function');
      assert.equal(typeof plugin.build, 'function');
    });

    describe('configure hook', function () {
      var plugin, context;
      describe('without providing config', function () {
        beforeEach(function () {
          config = {};
          plugin = subject.createDeployPlugin({
            name: 'build'
          });
          context = {
            ui: mockUi,
            config: config
          };
          plugin.beforeHook(context);
        });
        it('warns about missing optional config', function () {
          plugin.configure(context);
          var messages = mockUi.messages.reduce(function (previous, current) {
            if (/- Missing config:\s.*, using default:\s/.test(current)) {
              previous.push(current);
            }

            return previous;
          }, []);
          assert.equal(messages.length, 3);
        });

        it('adds default config to the config object', function () {
          plugin.configure(context);
          assert.isDefined(config.build.environment);
          assert.isDefined(config.build.outputPath);
        });
      });

      describe('with a build environment and outputPath provided', function () {
        beforeEach(function () {
          config = {
            build: {
              environment: 'development',
              outputPath: 'tmp/dist-deploy',
              distDir: function distDir(context) {
                return context.distDir;
              }
            }
          };
          plugin = subject.createDeployPlugin({
            name: 'build'
          });
          context = {
            ui: mockUi,
            config: config
          };
          plugin.beforeHook(context);
        });
        it('does not warn about missing optional config', function () {
          plugin.configure(context);
          var messages = mockUi.messages.reduce(function (previous, current) {
            if (/- Missing config:\s.*, using default:\s/.test(current)) {
              previous.push(current);
            }

            return previous;
          }, []);
          assert.equal(messages.length, 0);
        });
      });
    });

    describe('setup hook', function () {
      var plugin, context;

      beforeEach(function () {
        plugin = subject.createDeployPlugin({
          name: 'build'
        });

        context = {
          ui: mockUi,
          project: {
            name: function name() {
              return 'test-project';
            },
            require: (function (_require) {
              function require(_x) {
                return _require.apply(this, arguments);
              }

              require.toString = function () {
                return _require.toString();
              };

              return require;
            })(function (mod) {
              return require(mod);
            }),
            addons: [],
            root: 'tests/dummy'
          },
          config: {
            build: {
              buildEnv: 'development',
              outputPath: 'tmp/dist-deploy'
            }
          }
        };
        plugin.beforeHook(context);
      });

      it('resolves with distDir', function () {
        assert.deepEqual(plugin.setup(context), {
          distDir: 'tmp/dist-deploy'
        });
      });
    });

    describe('build hook', function () {
      var plugin, context;

      beforeEach(function () {
        plugin = subject.createDeployPlugin({
          name: 'build'
        });

        context = {
          ui: mockUi,
          project: {
            name: function name() {
              return 'test-project';
            },
            require: (function (_require2) {
              function require(_x2) {
                return _require2.apply(this, arguments);
              }

              require.toString = function () {
                return _require2.toString();
              };

              return require;
            })(function (mod) {
              return require(mod);
            }),
            addons: [],
            root: 'tests/dummy'
          },
          config: {
            build: {
              buildEnv: 'development',
              distDir: 'tmp/dist-deploy'
            }
          }
        };
        plugin.beforeHook(context);
      });

      it('builds the app and resolves with distFiles', function (done) {
        this.timeout(50000);
        return assert.isFulfilled(plugin.build(context)).then(function (result) {
          assert.deepEqual(result, {
            distFiles: ['assets/dummy.css', 'assets/dummy.js', 'assets/dummy.map', 'assets/failed.png', 'assets/passed.png', 'assets/test-loader.js', 'assets/test-support.css', 'assets/test-support.js', 'assets/test-support.map', 'assets/tests.js', 'assets/tests.map', 'assets/vendor.css', 'assets/vendor.js', 'assets/vendor.map', 'crossdomain.xml', 'index.html', 'robots.txt', 'testem.js', 'tests/index.html']
          });
          done();
        })['catch'](function (reason) {
          console.log(reason.actual.stack);
          done(reason.actual);
        });
      });
    });
  });
});
define('dummy/tests/unit/index-nodetest.jshint', ['exports'], function (exports) {
  'use strict';

  QUnit.module('JSHint - unit/index-nodetest.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'unit/index-nodetest.js should pass jshint.');
  });
});
/* jshint ignore:start */

require('dummy/tests/test-helper');
EmberENV.TESTS_FILE_LOADED = true;

/* jshint ignore:end */
//# sourceMappingURL=tests.map