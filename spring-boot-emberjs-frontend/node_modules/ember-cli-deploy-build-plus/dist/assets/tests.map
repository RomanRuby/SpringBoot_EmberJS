{"version":3,"sources":["dummy/tests/app.jshint.js","dummy/tests/helpers/destroy-app.js","dummy/tests/helpers/destroy-app.jshint.js","dummy/tests/helpers/module-for-acceptance.js","dummy/tests/helpers/module-for-acceptance.jshint.js","dummy/tests/helpers/resolver.js","dummy/tests/helpers/resolver.jshint.js","dummy/tests/helpers/start-app.js","dummy/tests/helpers/start-app.jshint.js","dummy/tests/resolver.jshint.js","dummy/tests/router.jshint.js","dummy/tests/runner.js","dummy/tests/runner.jshint.js","dummy/tests/test-helper.js","dummy/tests/test-helper.jshint.js","dummy/tests/unit/index-nodetest.js","dummy/tests/unit/index-nodetest.jshint.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["define('dummy/tests/app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('dummy/tests/helpers/destroy-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/destroy-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember', 'dummy/tests/helpers/start-app', 'dummy/tests/helpers/destroy-app'], function (exports, _qunit, _ember, _dummyTestsHelpersStartApp, _dummyTestsHelpersDestroyApp) {\n  var Promise = _ember['default'].RSVP.Promise;\n\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _dummyTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Promise.resolve(afterEach).then(function () {\n          return (0, _dummyTestsHelpersDestroyApp['default'])(_this.application);\n        });\n      }\n    });\n  };\n});","define('dummy/tests/helpers/module-for-acceptance.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/module-for-acceptance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/resolver', ['exports', 'dummy/resolver', 'dummy/config/environment'], function (exports, _dummyResolver, _dummyConfigEnvironment) {\n\n  var resolver = _dummyResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _dummyConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _dummyConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('dummy/tests/helpers/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/start-app', ['exports', 'ember', 'dummy/app', 'dummy/config/environment'], function (exports, _ember, _dummyApp, _dummyConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _dummyConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _dummyApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('dummy/tests/helpers/start-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/start-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('dummy/tests/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass jshint.');\n  });\n});","define('dummy/tests/router.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - router.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.');\n  });\n});","define('dummy/tests/runner', ['exports'], function (exports) {\n  /*jshint globalstrict: true*/\n  'use strict';\n\n  var glob = require('glob');\n  var Mocha = require('mocha');\n\n  var mocha = new Mocha({\n    reporter: 'spec'\n  });\n\n  var arg = process.argv[2];\n  var root = 'tests/';\n\n  function addFiles(mocha, files) {\n    glob.sync(root + files).forEach(mocha.addFile.bind(mocha));\n  }\n\n  addFiles(mocha, '/**/*-nodetest.js');\n\n  if (arg === 'all') {\n    addFiles(mocha, '/**/*-nodetest-slow.js');\n  }\n\n  mocha.run(function (failures) {\n    process.on('exit', function () {\n      process.exit(failures);\n    });\n  });\n});","define('dummy/tests/runner.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - runner.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'runner.js should pass jshint.');\n  });\n});","define('dummy/tests/test-helper', ['exports', 'dummy/tests/helpers/resolver', 'ember-qunit'], function (exports, _dummyTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_dummyTestsHelpersResolver['default']);\n});","define('dummy/tests/test-helper.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - test-helper.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/index-nodetest', ['exports'], function (exports) {\n  /*jshint globalstrict: true*/\n  'use strict';\n\n  var assert = require('ember-cli/tests/helpers/assert');\n\n  describe('build plugin', function () {\n    var subject, mockUi, config;\n\n    beforeEach(function () {\n      subject = require('../../index');\n      mockUi = {\n        messages: [],\n        verbose: true,\n        write: function write() {},\n        writeLine: function writeLine(message) {\n          this.messages.push(message);\n        }\n      };\n    });\n\n    it('has a name', function () {\n      var plugin = subject.createDeployPlugin({\n        name: 'test-plugin'\n      });\n\n      assert.equal(plugin.name, 'test-plugin');\n    });\n\n    it('implements the correct hooks', function () {\n      var plugin = subject.createDeployPlugin({\n        name: 'test-plugin'\n      });\n\n      assert.equal(typeof plugin.configure, 'function');\n      assert.equal(typeof plugin.build, 'function');\n    });\n\n    describe('configure hook', function () {\n      var plugin, context;\n      describe('without providing config', function () {\n        beforeEach(function () {\n          config = {};\n          plugin = subject.createDeployPlugin({\n            name: 'build'\n          });\n          context = {\n            ui: mockUi,\n            config: config\n          };\n          plugin.beforeHook(context);\n        });\n        it('warns about missing optional config', function () {\n          plugin.configure(context);\n          var messages = mockUi.messages.reduce(function (previous, current) {\n            if (/- Missing config:\\s.*, using default:\\s/.test(current)) {\n              previous.push(current);\n            }\n\n            return previous;\n          }, []);\n          assert.equal(messages.length, 3);\n        });\n\n        it('adds default config to the config object', function () {\n          plugin.configure(context);\n          assert.isDefined(config.build.environment);\n          assert.isDefined(config.build.outputPath);\n        });\n      });\n\n      describe('with a build environment and outputPath provided', function () {\n        beforeEach(function () {\n          config = {\n            build: {\n              environment: 'development',\n              outputPath: 'tmp/dist-deploy',\n              distDir: function distDir(context) {\n                return context.distDir;\n              }\n            }\n          };\n          plugin = subject.createDeployPlugin({\n            name: 'build'\n          });\n          context = {\n            ui: mockUi,\n            config: config\n          };\n          plugin.beforeHook(context);\n        });\n        it('does not warn about missing optional config', function () {\n          plugin.configure(context);\n          var messages = mockUi.messages.reduce(function (previous, current) {\n            if (/- Missing config:\\s.*, using default:\\s/.test(current)) {\n              previous.push(current);\n            }\n\n            return previous;\n          }, []);\n          assert.equal(messages.length, 0);\n        });\n      });\n    });\n\n    describe('setup hook', function () {\n      var plugin, context;\n\n      beforeEach(function () {\n        plugin = subject.createDeployPlugin({\n          name: 'build'\n        });\n\n        context = {\n          ui: mockUi,\n          project: {\n            name: function name() {\n              return 'test-project';\n            },\n            require: (function (_require) {\n              function require(_x) {\n                return _require.apply(this, arguments);\n              }\n\n              require.toString = function () {\n                return _require.toString();\n              };\n\n              return require;\n            })(function (mod) {\n              return require(mod);\n            }),\n            addons: [],\n            root: 'tests/dummy'\n          },\n          config: {\n            build: {\n              buildEnv: 'development',\n              outputPath: 'tmp/dist-deploy'\n            }\n          }\n        };\n        plugin.beforeHook(context);\n      });\n\n      it('resolves with distDir', function () {\n        assert.deepEqual(plugin.setup(context), {\n          distDir: 'tmp/dist-deploy'\n        });\n      });\n    });\n\n    describe('build hook', function () {\n      var plugin, context;\n\n      beforeEach(function () {\n        plugin = subject.createDeployPlugin({\n          name: 'build'\n        });\n\n        context = {\n          ui: mockUi,\n          project: {\n            name: function name() {\n              return 'test-project';\n            },\n            require: (function (_require2) {\n              function require(_x2) {\n                return _require2.apply(this, arguments);\n              }\n\n              require.toString = function () {\n                return _require2.toString();\n              };\n\n              return require;\n            })(function (mod) {\n              return require(mod);\n            }),\n            addons: [],\n            root: 'tests/dummy'\n          },\n          config: {\n            build: {\n              buildEnv: 'development',\n              distDir: 'tmp/dist-deploy'\n            }\n          }\n        };\n        plugin.beforeHook(context);\n      });\n\n      it('builds the app and resolves with distFiles', function (done) {\n        this.timeout(50000);\n        return assert.isFulfilled(plugin.build(context)).then(function (result) {\n          assert.deepEqual(result, {\n            distFiles: ['assets/dummy.css', 'assets/dummy.js', 'assets/dummy.map', 'assets/failed.png', 'assets/passed.png', 'assets/test-loader.js', 'assets/test-support.css', 'assets/test-support.js', 'assets/test-support.map', 'assets/tests.js', 'assets/tests.map', 'assets/vendor.css', 'assets/vendor.js', 'assets/vendor.map', 'crossdomain.xml', 'index.html', 'robots.txt', 'testem.js', 'tests/index.html']\n          });\n          done();\n        })['catch'](function (reason) {\n          console.log(reason.actual.stack);\n          done(reason.actual);\n        });\n      });\n    });\n  });\n});","define('dummy/tests/unit/index-nodetest.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/index-nodetest.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/index-nodetest.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('dummy/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7MA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;","file":"tests.js"}